{
	"info": {
		"_postman_id": "bd32390d-7996-4206-b58b-08b0a4f6bad2",
		"name": "Wompi Sandbox PSE",
		"description": "ColecciÃ³n para pruebas PSE en Wompi Sandbox con firma y delay integrado",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19905695",
		"_collection_link": "https://winter-sunset-207055.postman.co/workspace/RICK-POSTMAN~c1c07e49-daad-4027-b225-fb16535ec44a/collection/19905695-bd32390d-7996-4206-b58b-08b0a4f6bad2?action=share&source=collection_link&creator=19905695"
	},
	"item": [
		{
			"name": "Pruebas PSE",
			"item": [
				{
					"name": "PSE - Pago Exitoso",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const delay = ms => new Promise(res => setTimeout(res, ms));",
									"(async () => { await delay(1000); })();",
									"const CryptoJS = require(\"crypto-js\");",
									"let reference = pm.variables.replaceIn(\"{{reference}}\");",
									"let amount_in_cents = pm.variables.replaceIn(\"{{amount_in_cents}}\");",
									"let currency = \"COP\";",
									"let integrity_key = pm.environment.get(\"integrity_key\");",
									"let signature_string = reference + amount_in_cents + currency + integrity_key;",
									"let signature_hash = CryptoJS.SHA256(signature_string).toString(CryptoJS.enc.Hex);",
									"pm.environment.set(\"signature\", signature_hash);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{private_key}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"amount_in_cents\": \"{{amount_in_cents}}\",\n  \"currency\": \"COP\",\n  \"payment_method\": {\n    \"type\": \"PSE\",\n    \"user_type\": 0,\n    \"user_legal_id_type\": \"CC\",\n    \"user_legal_id\": \"123456789\",\n    \"financial_institution_code\": \"1001\",\n    \"payment_description\": \"Pago de prueba PSE\"\n  },\n  \"customer_email\": \"test@example.com\",\n  \"reference\": \"{{reference}}\",\n  \"acceptance_token\": \"{{acceptance_token}}\",\n  \"signature\": \"{{signature}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/transactions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transactions"
							]
						}
					},
					"response": []
				},
				{
					"name": "PSE - Pago Rechazado",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const delay = ms => new Promise(res => setTimeout(res, ms));",
									"(async () => { await delay(1000); })();",
									"const CryptoJS = require(\"crypto-js\");",
									"let reference = \"pago-pse-002\";",
									"let amount_in_cents = \"999999999\";",
									"let currency = \"COP\";",
									"let integrity_key = pm.environment.get(\"integrity_key\");",
									"let signature_string = reference + amount_in_cents + currency + integrity_key;",
									"let signature_hash = CryptoJS.SHA256(signature_string).toString(CryptoJS.enc.Hex);",
									"pm.environment.set(\"signature\", signature_hash);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{private_key}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"amount_in_cents\": 999999999,\n  \"currency\": \"COP\",\n  \"payment_method\": {\n    \"type\": \"PSE\",\n    \"user_type\": 0,\n    \"user_legal_id_type\": \"CC\",\n    \"user_legal_id\": \"123456789\",\n    \"financial_institution_code\": \"1001\",\n    \"payment_description\": \"Pago de prueba PSE\"\n  },\n  \"customer_email\": \"test@example.com\",\n  \"reference\": \"pago-pse-002\",\n  \"acceptance_token\": \"{{acceptance_token}}\",\n  \"signature\": \"{{signature}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/transactions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transactions"
							]
						}
					},
					"response": []
				},
				{
					"name": "PSE - Pago sin banco",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const delay = ms => new Promise(res => setTimeout(res, ms));",
									"(async () => { await delay(1000); })();",
									"const CryptoJS = require(\"crypto-js\");",
									"let reference = \"pago-pse-003\";",
									"let amount_in_cents = \"500000\";",
									"let currency = \"COP\";",
									"let integrity_key = pm.environment.get(\"integrity_key\");",
									"let signature_string = reference + amount_in_cents + currency + integrity_key;",
									"let signature_hash = CryptoJS.SHA256(signature_string).toString(CryptoJS.enc.Hex);",
									"pm.environment.set(\"signature\", signature_hash);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{private_key}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"amount_in_cents\": 500000,\n  \"currency\": \"COP\",\n  \"payment_method\": {\n    \"type\": \"PSE\",\n    \"user_type\": 0,\n    \"user_legal_id_type\": \"CC\",\n    \"user_legal_id\": \"123456789\",\n    \"payment_description\": \"Pago de prueba PSE\"\n  },\n  \"customer_email\": \"test@example.com\",\n  \"reference\": \"pago-pse-003\",\n  \"acceptance_token\": \"{{acceptance_token}}\",\n  \"signature\": \"{{signature}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/transactions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transactions"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Obtener Merchant",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"let token = pm.response.json().data.presigned_acceptance.acceptance_token;",
							"pm.environment.set(\"acceptance_token\", token);",
							"console.log(\"Acceptance token guardado:\", token);"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/merchants/{{public_key}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"merchants",
						"{{public_key}}"
					]
				}
			},
			"response": []
		}
	]
}